 #include <stdio.h>

void swap(int A[], int i, int j) {
    int temp = A[i];
    A[i] = A[j];
    A[j] = temp;
}


int partition(int A[], int lb, int ub) {
    int pivot = A[lb];
    int start = lb;
    int end = ub;

    while (start < end) {
        while (A[start] <= pivot) {
            start++;
        }
        while (A[end] > pivot) {
            end--;
        }
        if (start < end) {
            swap(A, start, end);
        }
    }

    swap(A, lb, end); 
    return end;
}

void quicksort(int A[], int lb, int ub) {
    if (lb < ub) {
        int loc = partition(A, lb, ub);
        quicksort(A, lb, loc - 1);
        quicksort(A, loc + 1, ub);
    }
}

int main() {
    int A[] = {7, 4, 10, 8, 3, 1};
    int n = sizeof(A) / sizeof(A[0]);

    printf("Original array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", A[i]);
    }

    quicksort(A, 0, n - 1);

    printf("\nSorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", A[i]);
    }

    return 0;
}

