#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};

 
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}
 
void insert(struct Node** bucket, int value) {
    struct Node* newNode = createNode(value);
    newNode->next = *bucket;
    *bucket = newNode;
}

 
void insertionSort(struct Node* bucket) {
    if (bucket == NULL || bucket->next == NULL) {
        return;
    }

    struct Node* sorted = NULL;
    struct Node* current = bucket;

    while (current != NULL) {
        struct Node* next = current->next;

        if (sorted == NULL || current->data < sorted->data) {
            current->next = sorted;
            sorted = current;
        } else {
            struct Node* temp = sorted;
            while (temp->next != NULL && temp->next->data < current->data) {
                temp = temp->next;
            }
            current->next = temp->next;
            temp->next = current;
        }

        current = next;
    }

    while (sorted != NULL) {
        printf("%d ", sorted->data);
        sorted = sorted->next;
    }
}

 
void bucketSort(int arr[], int n) {
    const int numBuckets = 10; // Assuming 10 buckets for simplicity
    struct Node* buckets[numBuckets];

     
    for (int i = 0; i < numBuckets; i++) {
        buckets[i] = NULL;
    }

 
    for (int i = 0; i < n; i++) {
        int index = arr[i] / numBuckets;
        insert(&buckets[index], arr[i]);
    }

   
    for (int i = 0; i < numBuckets; i++) {
        insertionSort(buckets[i]);
    }
}

int main() {
    int arr[] = {54, 46, 83, 66, 95, 92, 43};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    bucketSort(arr, n);

    printf("\nSorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}

